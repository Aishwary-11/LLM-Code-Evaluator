[
    {
        "title": "Next Permutation",
        "prompt": "Provide a Python solution in a class `Solution` for the following LeetCode problem. The solution must be in-place with constant extra memory.\n\nProblem: Next Permutation\nGiven an array of integers nums, rearrange the numbers into the lexicographically next greater permutation of numbers.\nIf such arrangement is not possible, rearrange it as the lowest possible order (i.e., sorted in ascending order).",
        "method_name": "nextPermutation",
        "inplace_modification": true,
        "test_cases": [
            {"input": {"nums": [1,2,3]}, "output": [1,3,2]},
            {"input": {"nums": [3,2,1]}, "output": [1,2,3]},
            {"input": {"nums": [1,1,5]}, "output": [1,5,1]},
            {"input": {"nums": [1]}, "output": [1]}
        ]
    },
    {
        "title": "Maximum Depth of Binary Tree",
        "prompt": "Provide a Python solution in a class `Solution` for the following LeetCode problem. You may assume a TreeNode class is defined.\n\nProblem: Maximum Depth of Binary Tree\nGiven the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root down to the farthest leaf node.",
        "method_name": "maxDepth",
        "test_cases": [
            {"input": {"root": [3,9,20,null,null,15,7]}, "output": 3},
            {"input": {"root": [1,null,2]}, "output": 2},
            {"input": {"root": []}, "output": 0},
            {"input": {"root": [1]}, "output": 1}
        ]
    },
    {
        "title": "Same Tree",
        "prompt": "Provide a Python solution in a class `Solution` for the following LeetCode problem. You may assume a TreeNode class is defined.\n\nProblem: Same Tree\nGiven the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.",
        "method_name": "isSameTree",
        "test_cases": [
            {"input": {"p": [1,2,3], "q": [1,2,3]}, "output": true},
            {"input": {"p": [1,2], "q": [1,null,2]}, "output": false},
            {"input": {"p": [1,2,1], "q": [1,1,2]}, "output": false},
            {"input": {"p": [], "q": []}, "output": true}
        ]
    },
    {
        "title": "Invert Binary Tree",
        "prompt": "Provide a Python solution in a class `Solution` for the following LeetCode problem. You may assume a TreeNode class is defined.\n\nProblem: Invert Binary Tree\nGiven the root of a a binary tree, invert the tree, and return its root.",
        "method_name": "invertTree",
        "output_is_tree": true,
        "test_cases": [
            {"input": {"root": [4,2,7,1,3,6,9]}, "output": [4,7,2,9,6,3,1]},
            {"input": {"root": [2,1,3]}, "output": [2,3,1]},
            {"input": {"root": []}, "output": []}
        ]
    },
    {
        "title": "Symmetric Tree",
        "prompt": "Provide a Python solution in a class `Solution` for the following LeetCode problem. You may assume a TreeNode class is defined.\n\nProblem: Symmetric Tree\nGiven the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).",
        "method_name": "isSymmetric",
        "test_cases": [
            {"input": {"root": [1,2,2,3,4,4,3]}, "output": true},
            {"input": {"root": [1,2,2,null,3,null,3]}, "output": false},
            {"input": {"root": [1]}, "output": true},
            {"input": {"root": []}, "output": true}
        ]
    },
    {
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "prompt": "Provide a Python solution in a class `Solution` for the following LeetCode problem. You may assume a TreeNode class is defined.\n\nProblem: Construct Binary Tree from Preorder and Inorder Traversal\nGiven two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.",
        "method_name": "buildTree",
        "output_is_tree": true,
        "test_cases": [
            {"input": {"preorder": [3,9,20,15,7], "inorder": [9,3,15,20,7]}, "output": [3,9,20,null,null,15,7]},
            {"input": {"preorder": [1,2], "inorder": [2,1]}, "output": [1,2,null,null]},
            {"input": {"preorder": [-1], "inorder": [-1]}, "output": [-1]}
        ]
    }
]
